trigger:
- main

pool:
  name: Samuel
  demands:
    - Agent.Name -equals sam

variables:
  dockerHubConnection: 'docker'
  imageName: 'samuel2004/periodic_table'
  SONAR_TOKEN: 'squ_01ae9a90f8ff5220f516aaa4bb5beefe1337e238'

steps:
  - checkout: self

  - powershell: |
      Get-ChildItem "$env:AGENT_TEMPDIRECTORY" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
    displayName: 'Clean up agent temp directory'

  # - script: docker system prune -af --volumes
  #   displayName: 'Clean Docker cache before build'

  - script: |
      docker run --rm ^
        -v "$(System.DefaultWorkingDirectory):/usr/src" ^
        sonarsource/sonar-scanner-cli:5 ^
        -Dsonar.projectKey=Periodic-Table ^
        -Dsonar.sources=/usr/src ^
        -Dsonar.host.url=http://host.docker.internal:9000 ^
        -Dsonar.login=$(SONAR_TOKEN) ^
        -Dsonar.scm.disabled=true ^
        -Dsonar.branch.name=
    displayName: 'Run SonarScanner in Docker Step'
  
  - task: dependency-check-build-task@6
    inputs:
      projectName: 'Periodic-Table'
      scanPath: '$(System.DefaultWorkingDirectory)'
      format: 'HTML'  # Other options: HTML, XML, JSON, CSV, ALL
    displayName: 'Run OWASP Dependency-Check'
  
  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      containerRegistry: $(dockerHubConnection)
      repository: $(imageName)
      command: buildAndPush
      Dockerfile: '**/Dockerfile'
      tags: |
        latest
  
  - task: SnykSecurityScan@1
    inputs:
      serviceConnectionEndpoint: 'snyk_image_scan'
      testType: 'container'
      dockerImageName: 'samuel2004/periodic_table:latest'

  - script: |
      curl -i -X POST https://api.render.com/deploy/srv-d1fjg02li9vc739k3m10?key=JY1YE4U-qhE
    displayName: 'Trigger Render Deployment (Safe & Logged)'
    condition: succeeded()

  - task: PowerShell@2
    displayName: 'Run HTML Validation'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Validating HTML via W3C Validator..."
        Invoke-WebRequest -UseBasicParsing `
          -Uri "https://validator.w3.org/nu/?doc=https://interactive-periodic-table-nsjh.onrender.com&out=json" `
          -Method Get `
          -OutFile "validation.json"

        $json = Get-Content "validation.json" | ConvertFrom-Json
        $errors = $json.messages | Where-Object { $_.type -eq 'error' }

        if ($errors.Count -gt 0) {
          Write-Host "❌ Found HTML validation errors:"
          $errors | ForEach-Object { Write-Host ($_ | ConvertTo-Json -Depth 3) }
          exit 1
        } else {
          Write-Host "✅ HTML is valid!"
        }